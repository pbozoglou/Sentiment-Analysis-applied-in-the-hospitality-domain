import requests
import time
from config import PLACES_API_KEY
import pandas as pd

API_KEY = PLACES_API_KEY
NEARBY_SEARCH_URL = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json'
PLACE_DETAILS_URL = 'https://maps.googleapis.com/maps/api/place/details/json'

# Get nearby hotels within a radius.
def get_nearby_places(location, radius, api_key, seen_place_ids):
    hotels = []
    params = {
        'location': location,
        # 'radius': radius,
        'rankby': 'distance',
        'type':'lodging',
        'key': api_key
    }
    
    '''
    Google allows up to 20 results per page, up to 3 pages.
    Using 'next_page_token' parameter here to get up to 3 pages.
    https://developers.google.com/maps/documentation/places/web-service/search-nearby#pagetoken
    '''
    page = 1  
    while True:
        response = requests.get(NEARBY_SEARCH_URL, params=params)
        data = response.json()

        # Saving results and checking for duplicates.
        for place in data.get('results', []):
            place_id = place['place_id']
            if place_id not in seen_place_ids:
                hotels.append(place)
                seen_place_ids.add(place_id)

        next_page_token = data.get('next_page_token')
        if not next_page_token:
            break
        params['pagetoken'] = next_page_token
        page += 1
        time.sleep(2)
    return hotels

# Get reviews for a given place_id
def get_place_reviews(place_id, api_key):
    params = {
        'place_id': place_id,
        'key': api_key
    }
    response = requests.get(PLACE_DETAILS_URL, params=params)
    reviews = response.json().get('result', {}).get('reviews', [])
    return reviews

def main():
    '''
    nearby_coordinates variable loads a set of coordinates generated by 'generate_coords.py' script.
    We will fetch lodging data for each coordinate and ignore duplicates.
    '''
    nearby_coordinates = pd.read_csv('datasets/grid_coordinates.csv')

    reviews_data = []
    seen_place_ids = set()  # A set to track unique place_ids
    # For each location, get lodgings in 1km radius.
    k=0
    for loc in nearby_coordinates.values:
        k+=1
        places = get_nearby_places(f"{loc[0]},{loc[1]}", 500, API_KEY,seen_place_ids)

        for place in places:
            if len(reviews_data)>=10000:break
            rating = place.get('rating')
            if not rating:continue
            place_id = place.get('place_id')

            # For each fetched lodging, get its reviews (up to 5 limit by Google Places API).
            reviews = get_place_reviews(place_id, API_KEY)
            for review in reviews:
                # print(review)
                text = review.get('text')
                if not text:continue
                print(f"\r{k}. Retrieved {len(reviews_data)} reviews.{len(places)}", end='')
                reviews_data.append({
                    'place_id': place_id,
                    'place_name':place.get('name'),
                    'place_rating':rating,
                    'place_address':place.get('vicinity'),
                    'place_types':place.get('types'),
                    'location.lat':place.get('geometry').get('location').get('lat'),
                    'location.lng':place.get('geometry').get('location').get('lng'),
                    'place_user_ratings_total':place.get('user_ratings_total'),
                    'user_name': review.get('author_name'),
                    'user_rating': review.get('rating'),
                    'review_text': text,
                    'creation_time': review.get('time')
                })

    # Export data to csv.
    pd.DataFrame(reviews_data).to_csv('datasets/reviews_athens.csv', index=False)
    print("Data saved to 'datasets' folder.")

if __name__ == '__main__':
    main()
    